name: build

on:
  pull_request:
    branches:
      - 'master'
  push:
    branches:
      - '*'



env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ryangoslingisnotdead/api-for-t-travelling
  PROJECT_NAME: API-for-T-Travelling

jobs:
  build-maven:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn -B clean package -DskipTests

      - name: Run Tests
        run: mvn test
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          FIREBASE_CONFIG_JSON: ${{ secrets.FIREBASE_CONFIG_JSON }}

      - name: Delete Old Artifacts
        uses: actions/github-script@v6
        id: artifact
        with:
          script: |
            const res = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
              
            res.data.artifacts
              .forEach(({ id }) => {
                github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: id,
                })
              })
#
#      - name: Upload JAR artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: app
#          path: target/*.jar

  build-docker:
    runs-on: ubuntu-latest
    needs: build-maven
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn -B clean package -DskipTests

#      - name: Run Tests
#        run: mvn test
#        env:
#          JWT_SECRET: ${{ secrets.JWT_SECRET }}
#          FIREBASE_CONFIG_JSON: ${{ secrets.FIREBASE_CONFIG_JSON }}

#      - name: Delete Old Artifacts
#        uses: actions/github-script@v6
#        id: artifact
#        with:
#          script: |
#            const res = await github.rest.actions.listArtifactsForRepo({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#            })
#
#            res.data.artifacts
#              .forEach(({ id }) => {
#                github.rest.actions.deleteArtifact({
#                  owner: context.repo.owner,
#                  repo: context.repo.repo,
#                  artifact_id: id,
#                })
#              })

#      - name: Download JAR artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: app
#          path: target/

      - name: Build Docker image
        run: docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${GITHUB_SHA::8} .

      - name: Log in to GitHub Container Registry
        run: docker login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${GITHUB_SHA::8}

  deploy-vps:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VPS_PRIVATE_KEY }}

      - name: Login to Docker Registry on VPS
        run: |
          ssh -o StrictHostKeyChecking=no "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}" \
          "docker login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} ${{ env.REGISTRY }}"

      - name: Remove existing container on VPS
        run: |
          ssh -o StrictHostKeyChecking=no "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}" \
          "docker rm -f ${{ env.PROJECT_NAME }} || true"

      - name: Remove existing Docker image on VPS
        run: |
          ssh -o StrictHostKeyChecking=no "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}" \
          "docker rmi \$(docker images -q ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}) || true"

      - name: Deploy new Docker image on VPS
        run: |
          ssh -o StrictHostKeyChecking=no "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}" \
          "docker run -d \
            --name ${{ env.PROJECT_NAME }} \
            --restart=always \
            --network t-network \
            -e DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            -e DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }} \
            -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e FIREBASE_CONFIG_JSON=$(echo "${{ secrets.FIREBASE_CONFIG_JSON }}" | sed 's/"/\\"/g')
            -p 8080:8080 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${GITHUB_SHA::8}"